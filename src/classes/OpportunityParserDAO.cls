public class OpportunityParserDAO {

    public static Map<String, Account> buscarSucViz( List<String> codes ) {
        List<Account> accounts = [SELECT Id, Sociedad__c, Organizacion_de_Ventas__c,
                                  Grupo_de_Vendedores__r.Codigo__c,
                                  Canal_Distribucion__c, Ramo__c,
                                  Numero_Cliente_SAP__c,
                                  Oficina_de_Ventas__r.Codigo__c,
                                  Canal_de_Distribucion_NSC__r.CodigoViz__c,
                                  Canal_de_Distribucion_NSC__r.Codigo__c
                      FROM Account
                      WHERE Numero_Cliente_SAP__c in :codes];

        Map<String, Account> mapaViz = new Map<String, Account>();
        for(Account acc:accounts){
            String newIdViz = String.valueOf(Integer.valueOf(acc.Numero_Cliente_SAP__c));
            mapaViz.put(newIdViz, acc);
        }

        return mapaViz;
    }


    public static Map<String, Account> buscarPorSAP(List<String> sapCodes){
        Map<String, Account> mapaCuentas = new Map<String, Account>();
        for(Account acc:[Select Id, Name, Numero_Cliente_SAP__c,
                         Canal_Distribucion__c, RecordTypeId, RecordType.Name,
                         Sociedad__c, Canal_de_Distribucion_NSC__r.Codigo__c,
                         Organizacion_de_Ventas__c,
                         Ramo__c,
                         Grupo_de_Vendedores__r.Codigo__c, Oficina_de_Ventas__r.Codigo__c,
                         Oficina_de_Ventas__r.IdPlanta__c,
                         Canal_de_Distribucion_NSC__r.CodigoViz__c, Cadena__c
                         From Account
                         Where Numero_Cliente_SAP__c in :sapCodes]){
            mapaCuentas.put(acc.Numero_Cliente_SAP__c, acc);
        }
		return mapaCuentas;
    }

    public static Map<Id, Account> cuentasDatosGenerales(List<String> ids){

        return new Map<Id, Account>([Select Id, Name, Numero_Cliente_SAP__c, Organizacion_de_Ventas__c,
                                     Ramo__c,
                Canal_Distribucion__c, Grupo_de_Vendedores__r.Codigo__c, Oficina_de_Ventas__r.Codigo__c,
                Oficina_de_Ventas__r.IdPlanta__c, Canal_de_Distribucion_NSC__r.Codigo__c,
                Canal_de_Distribucion_NSC__r.CodigoViz__c, Sociedad__c, Pais__c, Cadena__c
                From Account
                Where Id in :ids]);

    }

    public static Map<String, Oficina_de_Venta__c> canales(List<String> external){
        Map<String, Oficina_de_Venta__c> mapaCanales = new Map<String, Oficina_de_Venta__c>();
        for(Oficina_de_Venta__c oficina:[Select Id, Name, IdClienteViz__c, Codigo__c, IdPlanta__c,
                                         Valida_Disponibilidad__c, Sucursal_Viz__c, Surte_Otros_Canales__c,SucursalesViz__c,Dias_consolidacion__c, Dias_Consolidacion_Prod__c,Dias_de_cierre__c,Hora_de_cierre__c,Opera_en_SAP__c,Centro__c
                                         From Oficina_de_Venta__c
                                         Where Codigo__c in :external]){
        	mapaCanales.put(oficina.Codigo__c, oficina);
		}
        return mapaCanales;
    }

    public static Map<String,PricebookEntry> getPriceBookEntry(String standardList, List<String> productCodes) {
        Map<String,PricebookEntry> mapaPBE = new Map<String,PricebookEntry>();
        for( PricebookEntry entry : [ SELECT Id, Pricebook2Id, Product2.ProductCode, Product2.CsxPalletInt__c,
                                     Product2.Cajas_Tarima__c, Product2.Peso_Promedio__c,
                                     Product2.Piezas_por_caja__c, Product2.Unidad_de_medida_base__c
                                     FROM PricebookEntry
                                     WHERE Pricebook2Id = :standardList
                                     AND Product2.ProductCode IN : productCodes ] ) {
                                         mapaPBE.put(entry.Product2.ProductCode, entry);
                                     }
        return mapaPBE;
    }

    public static List<OpportunityParserController.SaveResult> upsertRecords(List<sobject> records, String objectName) {

        Database.UpsertResult[] results = Database.upsert(records, false);
        List<OpportunityParserController.SaveResult> customSaveResults = new List<OpportunityParserController.SaveResult>();
        Integer count = 0;
        for (Database.UpsertResult result : results) {
            Opportunity pedido = (Opportunity)records.get(count);
            OpportunityParserController.SaveResult saveResult = new OpportunityParserController.SaveResult();
            saveResult.record = pedido;
            if(pedido.Liberado__c!=null){
                if(pedido.Liberado__c=='S'){
                    saveResult.credito = 'Liberado';
                }else{
                    saveResult.credito = 'Retenido - ' + pedido.Motivo_Rechazo_Cartera__c;
                }
            }

            customSaveResults.add(saveResult);

            if (result.isSuccess()) {
                saveResult.idRecord = result.getId();
                
                system.debug('pedido result '+ pedido +' result'+result );
                if(objectName == 'Opportunity' && pedido.StageName == '11 - Bloqueado Cierre')
                {
                	system.debug('Envio Aprobacion');
                    PedidosOtrosCanalesUtils.submitForApproval(pedido,'Se Envio para su aprobacion (Cierre)','Cierre');
                }
                saveResult.isSuccess = true;
                saveResult.folioSFDC = pedido.Id_Externo__c;
                saveResult.folioSDL = pedido.Folio_Pedido_SDL__c;
                saveResult.folioTmp = pedido.Folio_Temporal__c;
            } else {
                saveResult.isSuccess = false; saveResult.folioTmp = pedido.Folio_Temporal__c;
                Database.Error[] errs = result.getErrors(); String errorMsgs = '';
                for( Database.Error err : errs ) {
                    String[] errFields = err.getFields();
                    errorMsgs += err.getMessage();
                    if(errFields!=null){ for( String field:errFields ) { errorMsgs += ':' + field; }}
                    errorMsgs += '; ';
                }
                System.debug('Error generando opps:' + errorMsgs);
                saveResult.errorMsg = errorMsgs;
            }
            count++;
        }
        return customSaveResults;
    }

    public static List<OpportunityParserController.SaveResult> upsertItems(List<OpportunityLineItem> records, String objectName) {

        Map<String, String> mapaFoliosTemporales = new Map<String, String>();
        for(OpportunityLineItem item:records){
            Opportunity parent = item.Opportunity;
            mapaFoliosTemporales.put(parent.Folio_Pedido_SDL__c, parent.Folio_Temporal__c);
            Opportunity newParent = new Opportunity();
            newParent.Folio_Pedido_SDL__c = parent.Folio_Pedido_SDL__c;
            item.Opportunity = newParent;
            System.debug('new parent:' + newParent);
            System.debug('item sin folio:' + item);
        }

        List<OpportunityParserController.SaveResult> customSaveResults = new List<OpportunityParserController.SaveResult>();

        Database.UpsertResult[] results = Database.upsert(records, false);
        Set<Id> lineItemsIds = new Set<Id>();
        for (Database.UpsertResult result : results) {
            if(result.isSuccess()) {
                lineItemsIds.add(result.getId());
            }
        }

        Map<Id,OpportunityLineItem> mapIdToLineItem = new Map<Id,OpportunityLineItem>();
        for( OpportunityLineItem lineItem : [ SELECT Id, product2.Name, opportunity.Name,
                                             opportunity.id, opportunity.Folio_Temporal__c,Opportunity.Id_Externo__c,
                                             Opportunity.Folio_Pedido_SDL__c
                                             FROM OpportunityLineItem
                                             WHERE Id IN : lineItemsIds]) {
                                                 mapIdToLineItem.put(lineItem.id,lineItem);
                                             }

        System.debug('lineItemstoInsert records ' + records);
        Integer count = 0;
        for (Database.UpsertResult result : results) {

            OpportunityParserController.SaveResult saveResult = new OpportunityParserController.SaveResult();

            customSaveResults.add(saveResult);

            if(result.isSuccess()) {
                OpportunityLineItem lineItem = mapIdToLineItem.get(result.getId());
                saveResult.folioTmp = lineItem.Opportunity.Folio_Temporal__c;
                saveResult.record = lineItem;
                saveResult.idRecord = result.getId();
                saveResult.isSuccess = true;
                saveResult.folioSFDC = lineItem.Opportunity.Id_Externo__c;
                saveResult.folioSDL = lineItem.Opportunity.Folio_Pedido_SDL__c;

            } else {
                OpportunityLineItem lineItem = records.get(count); saveResult.record = lineItem;

                Database.Error[] errs = result.getErrors(); String errorMsgs = '';
                for(Integer indexE=0;indexE<errs.size();indexE++) {
                    Database.Error err = errs.get(indexE);
                    String[] errFields = err.getFields();
                    errorMsgs += err.getMessage();
                    if(errFields!=null){
                        for(String field:errFields){ errorMsgs += ',' + field; } }
                    errorMsgs += '; ';
                }
                System.debug('Error generando items:' + errorMsgs);
                String folio = mapaFoliosTemporales.get(lineItem.Opportunity.Folio_Pedido_SDL__c);
                saveResult.folioTmp = folio; saveResult.isSuccess = false; saveResult.errorMsg = errorMsgs;

            }
            count++;
        }
        return customSaveResults;
    }
     public static string ValidarDiasConsolidacion(list<String> ListaDiasConsolidacion, String Producto)
    {
      map<string,string> mapDiasConsolidacion = new map<string,string>();
      string DiasConsolidacion;
      for(string value : ListaDiasConsolidacion)
      {
        string[] dConValues = value.split('_');
        if(dConValues != null && dConValues.size() > 0)
        {

          mapDiasConsolidacion.put(dConValues[0],dConValues[1]);
        }
      }
      return mapDiasConsolidacion.get(Producto);
    }
    public static map<string,AdminSaldosEstrategias__c> TraerEstrategiaComercialPorSemana(Integer semana)
    {
      integer semanaAnt = semana -1;
      System.debug('TraerSemana::: '+semana);
      map<string,AdminSaldosEstrategias__c> mapEstrategias = new map<string,AdminSaldosEstrategias__c>();
       for( AdminSaldosEstrategias__c admon :[select Id,Anio__c,Fecha_Final__c,Fecha_Inicial__c,Folio__c,Num_Semana__r.Name,Saldo_Final_Auto__c,Saldo_Final_Export__c,Saldo_Final_Mayo__c,
                      productoId__r.ProductCode,Prod_Master__r.MasterID__c,productoId__c,Prod_Master__c
          from AdminSaldosEstrategias__c
         where
              Num_Semana__r.name >=: String.valueOf(semanaAnt)
          order by   Num_Semana__r.name
       ])
       {
         if(admon.productoId__c != null)
            mapEstrategias.put(admon.productoId__r.ProductCode+admon.Num_Semana__r.Name,admon);

          if(admon.Prod_Master__c != null && admon.productoId__c == null)
            mapEstrategias.put(admon.Prod_Master__r.MasterID__c+admon.Num_Semana__r.Name,admon);
       }
       return mapEstrategias;
    }
    public static Map<String,product2> TraerProductosMasterPorCodigoProd(set<String>ProductCodes)
    {
        Map<String,product2> mapProduct2Master = new   Map<String,product2>();
       for(product2 p: [select id,ProductCode,Producto_Master__c,Producto_Master__r.MasterID__c from product2 where ProductCode IN : ProductCodes])
       {
            mapProduct2Master.put(p.ProductCode,p);
       }
       return mapProduct2Master;
    }
public static void fakeMethod(){
    Integer i = 0;
    i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;

     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
      i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
     i++;
    i++;
    i++;
    i++;
    //repeat the i++ hundred of times

  }
}